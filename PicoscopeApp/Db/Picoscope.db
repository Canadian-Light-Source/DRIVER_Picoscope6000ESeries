# PV to identify the picoscope to connect to via the serial number 
record(ao, "$(SERIAL_NUM)"){ 
	field(DTYP, "Picoscope")
	field(DESC, "Serial number of the device to open.")
	field(OUT, "@L:device_to_open")
}

record(waveform, "$(OSC):log"){ 
	field(DTYP, "Picoscope")
	field(SCAN, "Passive")
	field(MPST, "1")
	field(NELM, "500")
	field(FTVL, "CHAR")
    field(INP, "@L:get_log")
}

################################################################
#### Oscilloscope  PVs 
################################################################

record(mbbo, "$(OSC):resolution"){
    field(DTYP, "Soft Channel")
    field(DESC, "Sampling resolution of device.")

	field(ZRST, "8BIT")        field(ZRVL, "0")
	field(ONST, "10BIT")       field(ONVL, "10")
	field(TWST, "12BIT")       field(TWVL, "1")
    field(VAL,  "1")
	field(FLNK, "$(OSC):resolution:set")
}

record(ao, "$(OSC):resolution:set") {
	field(DTYP, "Picoscope")
	field(DOL, "$(OSC):resolution.RVAL")
	field(SCAN, "Passive")
	field(OIF, "Full")
	field(OMSL, "closed_loop")

    field(VAL,  "10")
	field(OUT, "@L:set_resolution")
	field(FLNK, "$(OSC):resolution:fbk:get")
}

record(ai, "$(OSC):resolution:fbk:get") {
	field(DTYP, "Picoscope")
	field(SCAN, "Passive")
	field(INP, "@L:get_resolution")
	field(FLNK, "$(OSC):resolution:fbk")
}

record(mbbi, "$(OSC):resolution:fbk") {
	field(DTYP, "Raw Soft Channel")

	field(ZRST, "8BIT")        field(ZRVL, "0")
	field(ONST, "10BIT")       field(ONVL, "10")
	field(TWST, "12BIT")       field(TWVL, "1")

	field(VAL, "10")
	field(SCAN, "Passive")

	field(INP, "$(OSC):resolution:fbk:get")
}

record(bo, "$(OSC):ON") {
	field(DTYP, "Soft Channel")
	field(DESC, "Turn picoscope on/off.")
	field(ZNAM, "OFF")    	
	field(ONAM, "ON") 

    field(VAL,  "1")
	field(FLNK,  "$(OSC):ON:fanout")
}

record(fanout, "$(OSC):ON:fanout") {
	field(SELM, "All")
	field(LNK1, "$(OSC):ON:set")
	field(LNK2, "$(OSC):device_info")
	field(LNK3, "$(OSC):ON:fbk:get")
}

record(ao, "$(OSC):ON:set") {
	field(DTYP, "Picoscope")
	field(DOL, "$(OSC):ON.RVAL")
	field(SCAN, "Passive")
	field(OIF, "Full")
	field(OMSL, "closed_loop")
    field(VAL,  "1")

	field(OUT, "@L:open_picoscope")
}

record(ai, "$(OSC):ON:fbk:get") {
	field(DTYP, "Picoscope")
	field(SCAN, "10 second")
	field(INP, "@L:get_device_status")
	field(FLNK, "$(OSC):ON:fbk.PROC")
}

record(bi, "$(OSC):ON:fbk") {
	field(DTYP, "Soft Channel")

	field(ZNAM, "OFF")
	field(ONAM, "ON")
	
	field(SCAN, "Passive")
	field(INP, "$(OSC):ON:fbk:get")
}

record(stringin, "$(OSC):device_info") {
	field(DTYP, "Picoscope")
	field(DESC, "Model and serial number of device.")
	field(INP, "@L:get_device_info")
    field(SCAN, "Passive")
}

################################################################
#### PVs used to configure data capture
################################################################
record(ao, "$(OSC):num_samples"){
    field(DESC, "Number of samples required.")
    field(DTYP, "Picoscope")
    field(VAL, "10000")
	field(DRVH, "1000000")
	field(DRVL, "1") 
    field(OUT, "@L:set_num_samples")
	
	field(FLNK, "$(OSC):timebase:fbk:fanout")
}

record(ai, "$(OSC):num_samples:fbk") {
    field(DESC, "Number of samples returned.")
    field(DTYP, "Picoscope")
    field(INP, "@L:get_num_samples")
}

record(ao, "$(OSC):down_sample_ratio"){
    field(DESC, "Down sampling factor to apply to data.")
    field(DTYP, "Picoscope")
    field(VAL, "0")
    field(OUT, "@L:set_down_sampling_ratio")
}

record(ai, "$(OSC):down_sample_ratio:fbk"){
    field(DESC, "Actual down sampling factor applied.")
    field(DTYP, "Picoscope")
    field(INP, "@L:get_down_sampling_ratio")
}

record(mbbo, "$(OSC):down_sample_ratio_mode") {
    field(DTYP, "Soft Channel")
    field(DESC, "Method of data reduction/downsampling.")

    field(ZRST, "AGGREGATE")                field(ZRVL, "1")
    field(ONST, "DECIMATE")                 field(ONVL, "2")
    field(TWST, "AVERAGE")                  field(TWVL, "4")
    field(THST, "TRIG_DATA_FOR_TIME_CALC")  field(THVL, "0x10000000")
    field(FRST, "TRIGGER")                  field(FRVL, "0x40000000")
    field(FVST, "RAW")                      field(FVVL, "0x80000000")

    field(VAL, "5")
    field(FLNK,  "$(OSC):down_sample_ratio_mode:set.PROC")
}

record(ao, "$(OSC):down_sample_ratio_mode:set") {
	field(DTYP, "Picoscope")
	field(DOL, "$(OSC):down_sample_ratio_mode.RVAL")
	field(SCAN, "Passive")
	field(OIF, "Full")
	field(OMSL, "closed_loop")
	field(VAL, "0x80000000")
	field(OUT, "@L:set_down_sampling_ratio_mode")
}

record(ai, "$(OSC):down_sample_ratio_mode:fbk:get") {
	field(DTYP, "Picoscope")
	field(INP, "@L:get_down_sampling_ratio_mode")
	field(FLNK, "$(OSC):down_sample_ratio_mode:fbk")
}

record(mbbi, "$(OSC):down_sample_ratio_mode:fbk") {
	field(DTYP, "Raw Soft Channel")
    field(DESC, "Data reduction/downsampling method set.")
	
    field(ZRST, "AGGREGATE")                field(ZRVL, "1")
    field(ONST, "DECIMATE")                 field(ONVL, "2")
    field(TWST, "AVERAGE")                  field(TWVL, "4")
    field(THST, "TRIG_DATA_FOR_TIME_CALC")  field(THVL, "0x10000000")
    field(FRST, "TRIGGER")                  field(FRVL, "0x40000000")
    field(FVST, "RAW")                      field(FVVL, "0x80000000")
	
	field(SCAN, "Passive")
	field(INP, "$(OSC):down_sample_ratio_mode:fbk:get")
}

record(ao, "$(OSC):trigger_position_ratio") {
    field(DESC, "The position of the trigger point.")
    field(DTYP, "Picoscope")
    field(VAL, "50")
	field(DRVH, "100")
	field(DRVL, "0")
	field(EGU, "%")
    field(OUT, "@L:set_trigger_position_ratio")
}

record(ai, "$(OSC):trigger_position_ratio:fbk"){ 
    field(DESC, "Actual position of the trigger point.")
    field(DTYP, "Picoscope")
	field(EGU, "%")
    field(INP, "@L:get_trigger_position_ratio")
}

################################################################
#### Timebase related PVs 
################################################################
record(mbbo, "$(OSC):time_per_division:unit") {
	field(DESC, "Time unit per division.")
	field(DTYP, "Soft Channel")
	field(ZRST, "ns/div")        field(ZRVL, "0")
	field(ONST, "us/div")        field(ONVL, "1")
	field(TWST, "ms/div")        field(TWVL, "2")
	field(THST, "s/div")      	 field(THVL, "3")

	field(FLNK, "$(OSC):time_per_division:unit:set.PROC")
}

record(ao, "$(OSC):time_per_division:unit:set") {
	field(DTYP, "Picoscope")
	field(DOL, "$(OSC):time_per_division:unit.RVAL")

	field(VAL, "1")

	field(SCAN, "Passive")
	field(OIF, "Full")
	field(OMSL, "closed_loop")
	field(OUT, "@L:set_time_per_division_unit")
	field(FLNK, "$(OSC):timebase:fbk:fanout")
}

record(ai, "$(OSC):time_per_division:unit:fbk:get") {
	field(DTYP, "Picoscope")
	field(INP, "@L:get_time_per_division_unit")
	field(FLNK, "$(OSC):time_per_division:unit:fbk")
}

record(mbbi, "$(OSC):time_per_division:unit:fbk") {
	field(DESC, "Time unit per division.")
	field(DTYP, "Soft Channel")
	field(ZRST, "ns/div")        field(ZRVL, "0")
	field(ONST, "us/div")        field(ONVL, "1")
	field(TWST, "ms/div")        field(TWVL, "2")
	field(THST, "s/div")      	 field(THVL, "3")

	field(SCAN, "Passive")
	field(INP, "$(OSC):time_per_division:unit:fbk:get")
} 

record(mbbo, "$(OSC):time_per_division") {
	field(DESC, "Time per division.")
	field(DTYP, "Soft Channel")

	field(ZRST, "1")        field(ZRVL, "1")
	field(ONST, "2")        field(ONVL, "2")
	field(TWST, "5")        field(TWVL, "5")
	field(THST, "10")       field(THVL, "10")
	field(FRST, "20")       field(FRVL, "20")
	field(FVST, "50")       field(FVVL, "50")
	field(SXST, "100")      field(SXVL, "100")
	field(SVST, "200")      field(SVVL, "200")
	field(EIST, "500")      field(EIVL, "500")
	field(NIST, "1000")     field(NIVL, "1000")
	field(TEST, "2000")     field(TEVL, "2000")
	field(ELST, "5000")     field(ELVL, "5000")

	field(FLNK, "$(OSC):time_per_division:set.PROC")
}

record(ao, "$(OSC):time_per_division:set") {
	field(DTYP, "Picoscope")
	field(DOL, "$(OSC):time_per_division.RVAL")

	field(VAL, "1")
	field(SCAN, "Passive")
	field(OIF, "Full")
	field(OMSL, "closed_loop")
	field(OUT, "@L:set_time_per_division")
	
	field(FLNK, "$(OSC):timebase:fbk:fanout")
}

record(ai, "$(OSC):time_per_division:fbk:get") {
	field(DTYP, "Picoscope")
	field(INP, "@L:get_time_per_division")
	field(FLNK, "$(OSC):time_per_division:fbk")
}

record(mbbi, "$(OSC):time_per_division:fbk") {
	field(DESC, "Time per division.")
	field(DTYP, "Raw Soft Channel")

	field(ZRST, "1")        field(ZRVL, "1")
	field(ONST, "2")        field(ONVL, "2")
	field(TWST, "5")        field(TWVL, "5")
	field(THST, "10")       field(THVL, "10")
	field(FRST, "20")       field(FRVL, "20")
	field(FVST, "50")       field(FVVL, "50")
	field(SXST, "100")      field(SXVL, "100")
	field(SVST, "200")      field(SVVL, "200")
	field(EIST, "500")      field(EIVL, "500")
	field(NIST, "1000")     field(NIVL, "1000")
	field(TEST, "2000")     field(TEVL, "2000")
	field(ELST, "5000")     field(ELVL, "5000")

	field(SCAN, "Passive")
	field(INP, "$(OSC):time_per_division:fbk:get.VAL")
} 

record(ao, "$(OSC):num_divisions"){ 
	field(DTYP, "Picoscope")
	field(DESC, "Number of divisions.")
	field(VAL, "10")
	field(OUT, "@L:set_num_divisions")
	
	field(FLNK, "$(OSC):timebase:fbk:fanout")
}

record(ai, "$(OSC):num_divisions:fbk"){
	field(DTYP, "Picoscope")
	field(DESC, "Number of divisions.")
	field(INP, "@L:get_num_divisions")
}

record(ai, "$(OSC):sample_interval:fbk"){ 
	field(DTYP, "Picoscope")
	field(DESC, "Actual sample interval in seconds.")
	field(EGU, "seconds")
	field(INP, "@L:get_sample_interval")
}

record(ai, "$(OSC):timebase:fbk"){
    field(DESC, "Actual timebase")
    field(DTYP, "Picoscope")
    field(INP, "@L:get_timebase")
}

record(ai, "$(OSC):sample_rate:fbk") {
	field(DESC, "Samples per second.")
	field(DTYP, "Picoscope")
	field(EGU, "S/s")
	field(INP, "@L:get_sample_rate")
}

record(fanout, "$(OSC):timebase:fbk:fanout"){ 
	field(LNK1, "$(OSC):sample_interval:fbk")
	field(LNK2, "$(OSC):timebase:fbk")
	field(LNK3, "$(OSC):sample_rate:fbk")
	field(LNK4, "$(OSC):time_per_division:unit:fbk:get")
	field(LNK5, "$(OSC):time_per_division:fbk:get")
	field(LNK6, "$(OSC):num_divisions:fbk")
	field(LNK7, "$(OSC):num_samples:fbk")
}

################################################################
#### PVs for acquiring waveform data 
################################################################
record(bo, "$(OSC):waveform:start") {
	field(DTYP, "Raw Soft Channel")
	field(VAL,  "0")
	field(ONAM, "START")
	field(HIGH, "1")
	field(FLNK, "$(OSC):waveform:start:fanout")	
}

record(fanout, "$(OSC):waveform:start:fanout") {
	field(LNK1, "$(OSC):trigger:channel:fbk:get")
	field(LNK2, "$(OSC):down_sample_ratio:fbk")
	field(LNK3, "$(OSC):down_sample_ratio_mode:fbk:get")
	field(LNK4, "$(OSC):trigger_position_ratio:fbk")
	field(LNK5, "$(OSC):trigger:direction:fbk")
	field(LNK6, "$(OSC):trigger:mode:fbk:get")
	field(LNK7, "$(OSC):trigger:upper:threshold:fbk")
	field(LNK8, "$(OSC):trigger:lower:threshold:fbk")
	field(LNK9, "$(OSC):waveform:start:calcout.PROC")
}

record(calcout, "$(OSC):waveform:start:calcout") {
    field(SCAN, "Passive")
    field(CALC, "A")
	field(INPA, "$(OSC):waveform:start")
	field(OOPT, "Transition To Non-zero")
	field(OUT, "$(OSC):waveform:start:call.PROC PP")
}

record(waveform, "$(OSC):waveform:start:call"){
    field(DTYP, "Picoscope")
	field(SCAN, "Passive")
	field(FTVL, "SHORT")
    field(INP, "@L:start_retrieve_waveform")
}

record(ai, "$(OSC):waveform:start:fbk:get") {
	field(DTYP, "Picoscope")
	field(SCAN, "5 second")
    field(INP, "@L:get_acquisition_status")
	field(FLNK, "$(OSC):waveform:start:fbk.PROC")
}

record(bi, "$(OSC):waveform:start:fbk"){
	field(DTYP, "Soft Channel")
    field(DESC, "Get data acquisition status.")
	field(ZNAM, "STOPPED")
	field(ONAM, "ACQUIRING")
	field(SCAN, "Passive")
	field(INP, "$(OSC):waveform:start:fbk:get")
}

record(bo, "$(OSC):waveform:stop") {
	field(DTYP, "Raw Soft Channel")
	field(VAL,  "0")
	field(ONAM, "STOP")
	field(HIGH, "1")
	field(FLNK, "$(OSC):waveform:stop:calcout")	
}

record(calcout, "$(OSC):waveform:stop:calcout") {
    field(SCAN, "Passive")
    field(CALC, "A")
	field(INPA, "$(OSC):waveform:stop")
	field(OOPT, "Transition To Non-zero")
	field(OUT, "$(OSC):waveform:stop:call.PROC PP")
}

record(waveform, "$(OSC):waveform:stop:call"){
    field(DTYP, "Picoscope")
	field(SCAN, "Passive")
	field(FTVL, "SHORT")
    field(INP, "@L:stop_retrieve_waveform")
}

record(ao, "$(OSC):auto_trigger_us"){ 
	field(DTYP, "Picoscope")
	field(DESC, "us to wait for trigger before collecting")
	field(EGU, "us")
	field(VAL, "0")
	field(OUT, "@L:set_auto_trigger_us")
	field(FLNK, "$(OSC):auto_trigger_us:fbk")
}

record(ai, "$(OSC):auto_trigger_us:fbk"){ 
	field(DTYP, "Picoscope")
	field(DESC, "us to wait for trigger before collecting")
	field(EGU, "us")
	field(VAL, "0")
	field(INP, "@L:get_auto_trigger_us")
}

record(mbbo, "$(OSC):trigger:type") {
	field(DTYP, "Picoscope")
	field(RVAL, "1")

    field(ZRST, "NO TRIGGER")	 field(ZRVL, "0")
	field(ONST, "SIMPLE EDGE")   field(ONVL, "1")
	# field(TWST, "WINDOW")        field(TWVL, "2")	

	field(OUT, "@L:set_trigger_type")
	field(FLNK, "$(OSC):trigger:type:fbk")
}

record(mbbi, "$(OSC):trigger:type:fbk"){
	field(DTYP, "Picoscope")
	field(VAL, "1")

    field(ZRST, "NO TRIGGER")	 field(ZRVL, "0")
	field(ONST, "SIMPLE EDGE")   field(ONVL, "1")
	# field(TWST, "WINDOW")        field(TWVL, "2")	

	field(INP, "@L:get_trigger_type")
}

record(mbbo, "$(OSC):trigger:channel") {
    field(DTYP, "Soft Channel")
    field(DESC, "Set Trigger Source Channel.")

    field(ZRST, "CHANNEL_A")			 field(ZRVL, "0")
	field(ONST, "CHANNEL_B")			 field(ONVL, "1")
	field(TWST, "CHANNEL_C")			 field(TWVL, "2")		
	field(THST, "CHANNEL_D")			 field(THVL, "3")		
	field(FRST, "TRIGGER_AUX") 			 field(FRVL, "1001")	
	field(FVST, "NONE")				     field(FVVL, "10")
	
	field(VAL, "4")
	field(FLNK, "$(OSC):trigger:channel:set.PROC")	
}

record(ao, "$(OSC):trigger:channel:set") {
	field(DTYP, "Picoscope")
	field(DOL, "$(OSC):trigger:channel.RVAL")
	field(SCAN, "Passive")
	field(OIF, "Full")
	field(OMSL, "closed_loop")
	field(VAL, "1001")
	field(OUT, "@L:set_trigger_channel")
	field(FLNK, "$(OSC):trigger:channel:fbk:get")	
}

record(ai, "$(OSC):trigger:channel:fbk:get") {
	field(DTYP, "Picoscope")
	field(INP, "@L:get_trigger_channel")
	field(FLNK, "$(OSC):trigger:channel:fbk")
}

record(mbbi, "$(OSC):trigger:channel:fbk") {
	field(DTYP, "Soft Channel")
    field(DESC, "Get Trigger Source Channel.")
	
    field(ZRST, "CHANNEL_A")			 field(ZRVL, "0")
	field(ONST, "CHANNEL_B")			 field(ONVL, "1")
	field(TWST, "CHANNEL_C")			 field(TWVL, "2")		
	field(THST, "CHANNEL_D")			 field(THVL, "3")		
	field(FRST, "TRIGGER_AUX") 			 field(FRVL, "1001")	
	field(FVST, "NONE")				     field(FVVL, "10")
	
	field(VAL, "4")
	field(SCAN, "Passive")
	field(INP, "$(OSC):trigger:channel:fbk:get")
}

record(mbbo, "$(OSC):trigger:direction") {
    field(DTYP, "Picoscope")

    field(DESC, "Set Trigger Direction.")
    field(ZRST, "RISING")		 field(ZRVL, "2")
	field(ONST, "FALLING")		 field(ONVL, "3")
	field(TWST, "NONE")          field(TWVL, "2")
	# field(TWST, "RISING_UPPER")		 field(TWVL, "2")		
	# field(THST, "FALLING_UPPER")	 field(THVL, "3")		
	# field(FRST, "RISING_LOW/FALLING_UP") field(FRVL, "4")		
	# field(FVST, "ABOVE_LOWER")		 field(FVVL, "5")		
	# field(SXST, "BELOW_LOWER")		 field(SXVL, "6")		
	# field(SVST, "RISING_LOWER")		 field(SVVL, "7")		
	# field(EIST, "FALLING_LOWER")	 field(EIVL, "8")
	# field(NIST, "WINDOW_POSITIVE_RUNT")	 field(NIVL, "9")
	# field(TEST, "WINDOW_NEGATIVE_RUNT")	 field(TEVL, "10")
	# field(ELST, "WINDOW_INSIDE")	 field(ELVL, "0")
	# field(TVST, "WINDOW_OUTSIDE")	 field(TVVL, "1")
	# field(TTST, "WINDOW_ENTER")	 	 field(TTVL, "2")
	# field(FTST, "WINDOW_EXIT")	 	 field(FTVL, "3")
	# field(FFST, "WINDOW_ENTER_EXIT") field(FFVL, "4")
	field(RVAL, "2")
	field(FLNK, "$(OSC):trigger:direction:fbk")		
	field(OUT, "@L:set_trigger_direction")
}

record(mbbi, "$(OSC):trigger:direction:fbk") {
	field(DTYP, "Picoscope")
    field(DESC, "Get Trigger Direction.")
	field(VAL, "0")
	field(RVAL, "2")


    field(ZRST, "RISING")		 field(ZRVL, "2")
	field(ONST, "FALLING")		 field(ONVL, "3")
	field(TWST, "NONE")          field(TWVL, "-1")

	# field(TWST, "RISING_UPPER")		 field(TWVL, "2")		
	# field(THST, "FALLING_UPPER")	 field(THVL, "3")		
	# field(FRST, "RISING_LOW/FALLING_UP") field(FRVL, "4")		
	# field(FVST, "ABOVE_LOWER")		 field(FVVL, "5")		
	# field(SXST, "BELOW_LOWER")		 field(SXVL, "6")		
	# field(SVST, "RISING_LOWER")		 field(SVVL, "7")		
	# field(EIST, "FALLING_LOWER")	 field(EIVL, "8")
	# field(NIST, "WINDOW_POSITIVE_RUNT")	 field(NIVL, "9")
	# field(TEST, "WINDOW_NEGATIVE_RUNT")	 field(TEVL, "10")
	# field(ELST, "WINDOW_INSIDE")	 field(ELVL, "0")
	# field(TVST, "WINDOW_OUTSIDE")	 field(TVVL, "1")
	# field(TTST, "WINDOW_ENTER")	 	 field(TTVL, "2")
	# field(FTST, "WINDOW_EXIT")	 	 field(FTVL, "3")
	# field(FFST, "WINDOW_ENTER_EXIT") field(FFVL, "4")
	field(INP, "@L:get_trigger_direction")
}


record(ai, "$(OSC):trigger:mode:fbk:get") {
	field(DTYP, "Picoscope")
	field(INP, "@L:get_trigger_mode")
	field(FLNK, "$(OSC):trigger:mode:fbk")
}

record(mbbi, "$(OSC):trigger:mode:fbk") {
	field(DTYP, "Soft Channel")
    field(DESC, "Get Trigger Mode.")
   
    field(ZRST, "LEVEL")	     field(ZRVL, "0")
	field(ONST, "WINDOW")	     field(ONVL, "1")

	field(VAL, "0")
	field(SCAN, "Passive")
	field(INP, "$(OSC):trigger:mode:fbk:get")
}

record(ao, "$(OSC):trigger:upper:threshold") {
	field(DTYP, "Picoscope")
	field(VAL, "0")
	field(OUT, "@L:set_trigger_upper")
	field(FLNK, "$(OSC):trigger:upper:threshold:fbk")
}

record(ai, "$(OSC):trigger:upper:threshold:fbk") {
	field(DTYP, "Picoscope")
	field(INP, "@L:get_trigger_upper")
}

record(ao, "$(OSC):trigger:lower:threshold") {
	field(DTYP, "Picoscope")
	field(VAL, "0")
	field(OUT, "@L:set_trigger_lower")
	field(FLNK, "$(OSC):trigger:lower:threshold:fbk")
}

record(ai, "$(OSC):trigger:lower:threshold:fbk") {
	field(DTYP, "Picoscope")
	field(INP, "@L:get_trigger_lower")
}